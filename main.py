from aiogram import Bot, Dispatcher, executor, types
from decouple import config
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.middlewares.logging import LoggingMiddleware
import markups
import aiohttp
import asyncio
import requests

storage = MemoryStorage()
bot = Bot(config('TOKEN'))
dp = Dispatcher(bot=bot, storage=storage)
# dp.middleware.setup(LoggingMiddleware())

# Variables
cat_waving_sticker = 'CAACAgUAAxkBAAMTZODxSVrx-Au63rwBN1KalR7coR0AAuIFAAKncZlWsMfRBFaNBHQwBA'
subjects_photo = 'https://img.freepik.com/free-vector/cute-shiba-inu-dog-reading-book-with-coffee-cartoon-vector-icon-illustration-animal-education-icon_138676-5547.jpg'


# URLs
CHECK_NUMBER_API = 'http://app.vanilla-code.pp.ua/api/account/check_number/?number='


class UserState(StatesGroup):
    start = State()
    logged = State()
    exiting = State()


@dp.message_handler(commands=['start'], state='*')
async def cmd_start(message:types.Message, state: FSMContext):
    await message.answer_sticker(cat_waving_sticker)
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ‚ú®Vanilla Code‚ú®!\n'
                         f'–†–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ–º –æ —Å–ª–æ–∂–Ω–æ–º –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏.'
                         f'–ó–∞—Ü–µ–Ω–∏ –Ω–∞—à–∏ –∫—É—Ä—Å—ã, —Ç–∞–º –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ!', reply_markup=markups.start_markup)
    await UserState.start.set()


@dp.message_handler(lambda message: message.text == 'üìö –ü—Ä–µ–¥–º–µ—Ç—ã', state='*')
async def subjects(message: types.Message, state: FSMContext):
    subjects_caption = ('–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –Ω–∞—Å –¥–æ—Å—Ç—É–ø–Ω—ã –∫—É—Ä—Å—ã –ø–æ —Ç—Ä—ë–º –Ω–∞–∏–±–æ–ª–µ–µ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º\n'
                        '–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±–µ—Ä–∏ –µ–≥–æ –Ω–∞–∂–∞—Ç–∏–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ —Å–Ω–∏–∑—É ')
    await message.answer_photo(photo=subjects_photo, caption=subjects_caption, reply_markup=markups.subject_list)
    await state.finish()


@dp.message_handler(lambda message: message.text == 'üêç Backend', state='*')
async def contacts(message: types.Message, state: FSMContext):
    await message.answer('–ö–æ–Ω—Ç–∞–∫—Ç—ã:\n'
                         'Email -> dastan12151@gmail.com\n'
                         '–ù–∞—à —Å–∞–π—Ç -> https://vanillacode-61871.web.app\n'
                         '–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ü–∏—à–∏ —Å—é–¥–∞ -> @dastanasanov')
    await state.finish()


@dp.message_handler(lambda message: message.text == 'üí© Frontend', state='*')
async def contacts(message: types.Message, state: FSMContext):
    await message.answer()
    await state.finish()


@dp.message_handler(lambda message: message.text == 'ü™Ñ UX/UI Design', state='*')
async def contacts(message: types.Message, state: FSMContext):
    await message.answer('–ö–æ–Ω—Ç–∞–∫—Ç—ã:\n'
                         'Email -> dastan12151@gmail.com\n'
                         '–ù–∞—à —Å–∞–π—Ç -> https://vanillacode-61871.web.app\n'
                         '–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ü–∏—à–∏ —Å—é–¥–∞ -> @dastanasanov')
    await state.finish()


@dp.message_handler(lambda message: message.text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', state='*')
async def contacts(message: types.Message, state: FSMContext):
    await message.answer('–ö–æ–Ω—Ç–∞–∫—Ç—ã:\n'
                         'Email -> dastan12151@gmail.com\n'
                         '–ù–∞—à —Å–∞–π—Ç -> https://vanillacode-61871.web.app\n'
                         '–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ü–∏—à–∏ —Å—é–¥–∞ -> @dastanasanov')
    await state.finish()


@dp.message_handler(lambda message: message.text == '‚ùå –í—ã–π—Ç–∏ –∏–∑ –±–æ—Ç–∞', state='*')
async def quit_bot(message: types.Message, state: FSMContext):
    await message.answer('–ü–æ–∫–∞! –ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ -> /start', reply_markup=types.ReplyKeyboardRemove())
    await bot.close()
    await state.finish()


@dp.message_handler(lambda message: message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', state='*')
async def back_to_main_menu(message: types.Message, state: FSMContext):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å—Ç–∞—Ä—Ç –º–µ–Ω—é
    await cmd_start(message, state)


@dp.message_handler(commands=['send_contact'])
async def send_contact(message: types.Message):
    await message.answer('–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —á—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –≤–∞—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–∞',
                         reply_markup=markups.share_contact)

    @dp.message_handler(content_types=types.ContentType.CONTACT)
    async def handle_contact(message: types.Message):
        contact = message.contact
        number = contact.phone_number
        async with aiohttp.ClientSession() as session:
            try:
                async with session.get(CHECK_NUMBER_API+number) as response:
                    if response.status == 200:
                        await message.answer('–ù–∞—à–ª–∏!')
                        await UserState.logged.set()
                    elif response.status == 404:
                        await message.answer('–Æ–∑–µ—Ä–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
            except:
                await message.answer("–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")

    # await message.answer('–ö–æ–Ω—Ç–∞–∫—Ç: ')


@dp.message_handler()
async def answer(message: types.Message):
    await message.reply('–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç, –≤–≤–µ–¥–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é!')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
