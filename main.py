from aiogram import Bot, Dispatcher, executor, types
from decouple import config
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import markups
import aiohttp
import asyncio
import requests
import tempfile
import os

storage = MemoryStorage()
bot = Bot(config('TOKEN'))
dp = Dispatcher(bot=bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

# Variables
CAT_WAVING_STICKER = 'CAACAgUAAxkBAAMTZODxSVrx-Au63rwBN1KalR7coR0AAuIFAAKncZlWsMfRBFaNBHQwBA'
SUBJECTS_PHOTO = 'https://img.freepik.com/free-vector/cute-shiba-inu-dog-reading-book-with-coffee-cartoon-vector-icon-illustration-animal-education-icon_138676-5547.jpg'
DEFAULT_COURSE_PHOTO = 'http://app.vanilla-code.pp.ua/images/course_previews/photo_2023-08-15_14-38-52.jpg'


# URLs
MAIN_API = 'http://app.vanilla-code.pp.ua/'
CHECK_NUMBER_API = 'http://app.vanilla-code.pp.ua/api/account/check_number/?number='
GET_COURSES_API = 'http://app.vanilla-code.pp.ua/api/courses/'


class UserState(StatesGroup):
    start = State()
    # course = State() Not needed
    logged = State()
    logged_lesson_back = State()
    logged_lesson_front = State()
    logged_lesson_design = State()
    exiting = State()


@dp.message_handler(commands=['start'], state='*')
async def cmd_start(message:types.Message, state: FSMContext):
    await message.answer_sticker(CAT_WAVING_STICKER)
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ‚ú®Vanilla Code‚ú®!\n'
                         f'–†–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ–º –æ —Å–ª–æ–∂–Ω–æ–º –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏.'
                         f'–ó–∞—Ü–µ–Ω–∏ –Ω–∞—à–∏ –∫—É—Ä—Å—ã, —Ç–∞–º –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ!', reply_markup=markups.start_markup)
    await UserState.start.set()


@dp.message_handler(lambda message: message.text == 'üìö –ü—Ä–µ–¥–º–µ—Ç—ã', state=[UserState.logged, '*'])
async def subjects(message: types.Message, state: FSMContext):
    states = (UserState.logged.state, UserState.start.state)
    current_state = str(await state.get_state())
    if current_state in states and current_state == UserState.logged.state:
        subjects_caption = ('–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –Ω–∞—Å –¥–æ—Å—Ç—É–ø–Ω—ã –∫—É—Ä—Å—ã –ø–æ —Ç—Ä—ë–º –Ω–∞–∏–±–æ–ª–µ–µ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º\n'
                            '–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –≤—ã–±–µ—Ä–∏ –µ–≥–æ –Ω–∞–∂–∞—Ç–∏–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ —Å–Ω–∏–∑—É üëá')
        await message.answer_photo(photo=SUBJECTS_PHOTO, caption=subjects_caption, reply_markup=markups.subject_list)
    else:
        await message.answer('–ß—Ç–æ–±—ã —Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å—ã –º—ã –¥–æ–ª–∂–Ω—ã –≤–∞—Å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–∞–∫ –Ω–∞—à–µ–≥–æ —é–∑–µ—Ä–∞\n '
                             '–ù–∞–∂–º–∏ /send_contact —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º')
        await state.finish()


@dp.message_handler(lambda message: message.text == 'üêç Backend', state=UserState.logged)
async def contacts(message: types.Message, state: FSMContext):
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(GET_COURSES_API) as response:
                if response.status == 200:
                    data = await response.json()
                    for course in data:
                        if course['title'] == '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è Backend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫':
                            backend_course = course
                    course_title = backend_course['title']
                    course_price = backend_course['price']
                    relative_preview = backend_course.get('preview', '')
                    avg_rating = backend_course.get('rating', {}).get('rating__avg', '–†–µ–π—Ç–∏–Ω–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
                    full_preview = MAIN_API + relative_preview if relative_preview else DEFAULT_COURSE_PHOTO

                    async with session.get(full_preview) as image_response:
                        image_data = await image_response.read()
                        with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_image:
                            temp_image.write(image_data)
                            temp_image_path = temp_image.name

                    course_info = (
                        f"üìö –ö—É—Ä—Å: {course_title}\n"
                        f"üí∞ –¶–µ–Ω–∞: {course_price}\n"
                        f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {avg_rating}"
                    )
                    with open(temp_image_path, 'rb') as photo_file:
                        await message.answer_photo(photo=types.InputFile(photo_file),
                                                   caption=course_info,
                                                   reply_markup=markups.course_options)

                    os.remove(temp_image_path)

                    await UserState.logged_lesson_back.set()
                else:
                    await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–∞—Ö.")
        except Exception as e:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–∞—Ö.")


@dp.message_handler(lambda message: message.text == 'üí© Frontend', state=UserState.logged)
async def contacts(message: types.Message, state: FSMContext):
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(GET_COURSES_API) as response:
                if response.status == 200:
                    data = await response.json()
                    for course in data:
                        if course['title'] == '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è Frontend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫':
                            frontend_course = course
                    course_title = frontend_course['title']
                    course_price = frontend_course['price']
                    relative_preview = frontend_course.get('preview', '')
                    avg_rating = frontend_course.get('rating', {}).get('rating__avg', '–†–µ–π—Ç–∏–Ω–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
                    full_preview = MAIN_API + relative_preview if relative_preview else DEFAULT_COURSE_PHOTO

                    async with session.get(full_preview) as image_response:
                        image_data = await image_response.read()
                        with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_image:
                            temp_image.write(image_data)
                            temp_image_path = temp_image.name

                    course_info = (
                        f"üìö –ö—É—Ä—Å: {course_title}\n"
                        f"üí∞ –¶–µ–Ω–∞: {course_price}\n"
                        f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {avg_rating}"
                    )
                    with open(temp_image_path, 'rb') as photo_file:
                        await message.answer_photo(photo=types.InputFile(photo_file),
                                                   caption=course_info,
                                                   reply_markup=markups.course_options)

                    os.remove(temp_image_path)
                    await UserState.logged_lesson_front.set()
                else:
                    await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–∞—Ö.")
        except Exception as e:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–∞—Ö.")


@dp.message_handler(lambda message: message.text == 'ü™Ñ UX/UI Design', state=UserState.logged)
async def contacts(message: types.Message, state: FSMContext):
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(GET_COURSES_API) as response:
                if response.status == 200:
                    data = await response.json()
                    for course in data:
                        if course['title'] == '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è UX/UI‚Äë–¥–∏–∑–∞–π–Ω–µ—Ä':
                            design_course = course
                    course_title = design_course['title']
                    course_price = design_course['price']
                    relative_preview = design_course.get('preview', '')
                    avg_rating = design_course.get('rating', {}).get('rating__avg', '–†–µ–π—Ç–∏–Ω–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
                    full_preview = MAIN_API + relative_preview if relative_preview else DEFAULT_COURSE_PHOTO

                    async with session.get(full_preview) as image_response:
                        image_data = await image_response.read()
                        with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_image:
                            temp_image.write(image_data)
                            temp_image_path = temp_image.name

                    course_info = (
                        f"üìö –ö—É—Ä—Å: {course_title}\n"
                        f"üí∞ –¶–µ–Ω–∞: {course_price}\n"
                        f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {avg_rating}"
                    )
                    with open(temp_image_path, 'rb') as photo_file:
                        await message.answer_photo(photo=types.InputFile(photo_file),
                                                   caption=course_info,
                                                   reply_markup=markups.course_options)

                    os.remove(temp_image_path)
                    await UserState.logged_lesson_design.set()
                else:
                    await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–∞—Ö.")
        except Exception as e:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–∞—Ö.")


@dp.message_handler(lambda message: message.text == 'üìñ  –£—Ä–æ–∫–∏',
                    state=[UserState.logged_lesson_design, UserState.logged_lesson_front, UserState.logged_lesson_back])
async def lessons(message: types.Message, state: FSMContext):
    async with aiohttp.ClientSession() as session:
        current_state = await state.get_state()
        if current_state == UserState.logged_lesson_back.state:
            course_id = 10
        elif current_state == UserState.logged_lesson_front.state:
            course_id = 1
        elif current_state == UserState.logged_lesson_design.state:
            course_id = 9
        try:
            lessons_url = f'http://16.171.231.50/api/lessons/?course_id={course_id}'
            async with session.get(lessons_url) as response:
                if response.status == 200:
                    lesson_data = await response.json()
                    results = lesson_data.get("results")[0]
                    next_link = lesson_data.get("next")
                    previous_link = lesson_data.get("previous")
                    youtube_link = results.get("youtube_link", "–£ –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–∫–∞ –Ω–µ—Ç –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫–∞")
                    relative_preview = results.get("preview", "")
                    question = results.get("question", "–£ –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–∞ –∫ –Ω–µ–º—É")
                    if question != '–£ –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–∞ –∫ –Ω–µ–º—É':
                        right_answer = results.get('right_answer')
                        wrong_answers = results.get('wrong_answers')
                        answers = (right_answer + ', ' + wrong_answers) if wrong_answers else right_answer
                    else:
                        answers = '–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–∞, –Ω–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤'
                    like_count = results.get("like_count", 0)
                    dislike_count = results.get("dislike_count", 0)

                    full_preview_url = MAIN_API + relative_preview if relative_preview else DEFAULT_COURSE_PHOTO

                    async with session.get(full_preview_url) as image_response:
                        image_data = await image_response.read()
                        with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_image:
                            temp_image.write(image_data)
                            temp_image_path = temp_image.name

                    lesson_info = (
                        f"üñ•Ô∏è –°—Å—ã–ª–∫–∞ –Ω–∞ —é—Ç—É–± —Ä–æ–ª–∏–∫: {youtube_link}\n"
                        f"‚ùì –í–æ–ø—Ä–æ—Å –∫ —É—Ä–æ–∫—É: {question}\n"
                        f"üìù –û—Ç–≤–µ—Ç—ã: {answers}\n"
                        f"üëç –õ–∞–π–∫–æ–≤: {like_count},üëé –î–∏–∑–ª–∞–π–∫–æ–≤: {dislike_count}"
                    )

                    await state.update_data(next_link=next_link)
                    await state.update_data(previous_link=previous_link)
                    with open(temp_image_path, 'rb') as photo_file:
                        await bot.send_photo(message.chat.id, photo=photo_file, caption=lesson_info)

                    os.remove(temp_image_path)

                    keyboard = InlineKeyboardMarkup(row_width=2)
                    if lesson_data.get("previous"):
                        keyboard.add(InlineKeyboardButton("–ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data="previous_lesson"))
                    if lesson_data.get("next"):
                        keyboard.add(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π", callback_data="next_lesson"))

                    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

                else:
                    await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± —É—Ä–æ–∫–∞—Ö.")
        except Exception as e:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± —É—Ä–æ–∫–∞—Ö.")


@dp.callback_query_handler(lambda query: query.data == "next_lesson",
                           state='*')
async def next_page_hotels_callback(callback_query: types.CallbackQuery, state: FSMContext):
    async with aiohttp.ClientSession() as session:
        try:
            data = await state.get_data()
            next_link = data.get("next_link")

            async with session.get(next_link) as response:
                if response.status == 200:
                    lesson_data = await response.json()
                    results = lesson_data.get("results")[0]
                    next_link = lesson_data.get("next")
                    previous_link = lesson_data.get("previous")

                    youtube_link = results.get("youtube_link", "–£ –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–∫–∞ –Ω–µ—Ç –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫–∞")
                    relative_preview = results.get("preview", "")
                    question = results.get("question", "–£ –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–∞ –∫ –Ω–µ–º—É")
                    if question != '–£ –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–∞ –∫ –Ω–µ–º—É':
                        right_answer = results.get('right_answer')
                        wrong_answers = results.get('wrong_answers')
                        answers = (right_answer + ', ' + wrong_answers) if wrong_answers else right_answer
                    like_count = results.get("like_count", 0)
                    dislike_count = results.get("dislike_count", 0)

                    full_preview_url = MAIN_API + relative_preview if relative_preview else DEFAULT_COURSE_PHOTO

                    async with session.get(full_preview_url) as image_response:
                        image_data = await image_response.read()
                        with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_image:
                            temp_image.write(image_data)
                            temp_image_path = temp_image.name

                    lesson_info = (
                        f"üñ•Ô∏è –°—Å—ã–ª–∫–∞ –Ω–∞ —é—Ç—É–± —Ä–æ–ª–∏–∫: {youtube_link}\n"
                        f"‚ùì –í–æ–ø—Ä–æ—Å –∫ —É—Ä–æ–∫—É: {question}\n"
                        f"üìù –û—Ç–≤–µ—Ç—ã: {answers}\n"
                        f"üëç –õ–∞–π–∫–æ–≤: {like_count},üëé –î–∏–∑–ª–∞–π–∫–æ–≤: {dislike_count}"
                    )

                    await state.update_data(next_link=next_link)
                    await state.update_data(previous_link=previous_link)
                    with open(temp_image_path, 'rb') as photo_file:
                        await bot.send_photo(callback_query.message.chat.id, photo=photo_file, caption=lesson_info)

                    os.remove(temp_image_path)

                    keyboard = InlineKeyboardMarkup(row_width=2)
                    if lesson_data.get("previous"):
                        keyboard.add(InlineKeyboardButton("–ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data="previous_lesson"))
                    if lesson_data.get("next"):
                        keyboard.add(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π", callback_data="next_lesson"))

                    await bot.send_message(callback_query.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

                else:
                    await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± —É—Ä–æ–∫–∞—Ö.")
        except Exception as e:
            await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± —É—Ä–æ–∫–∞—Ö.")


@dp.callback_query_handler(lambda query: query.data == "previous_lesson",
                           state='*')
async def next_page_hotels_callback(callback_query: types.CallbackQuery, state: FSMContext):
    async with aiohttp.ClientSession() as session:
        try:
            data = await state.get_data()
            previous_link = data.get("previous_link")

            async with session.get(previous_link) as response:
                if response.status == 200:
                    lesson_data = await response.json()
                    results = lesson_data.get("results")[0]
                    next_link = lesson_data.get("next")
                    previous_link = lesson_data.get("previous")

                    youtube_link = results.get("youtube_link", "–£ –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–∫–∞ –Ω–µ—Ç –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫–∞")
                    relative_preview = results.get("preview", "")
                    question = results.get("question", "–£ –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–∞ –∫ –Ω–µ–º—É")
                    if question != '–£ –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–∞ –∫ –Ω–µ–º—É':
                        right_answer = results.get('right_answer')
                        wrong_answers = results.get('wrong_answers')
                        answers = (right_answer + ', ' + wrong_answers) if wrong_answers else right_answer
                    like_count = results.get("like_count", 0)
                    dislike_count = results.get("dislike_count", 0)

                    full_preview_url = MAIN_API + relative_preview if relative_preview else DEFAULT_COURSE_PHOTO

                    async with session.get(full_preview_url) as image_response:
                        image_data = await image_response.read()
                        with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_image:
                            temp_image.write(image_data)
                            temp_image_path = temp_image.name

                    lesson_info = (
                        f"üñ•Ô∏è –°—Å—ã–ª–∫–∞ –Ω–∞ —é—Ç—É–± —Ä–æ–ª–∏–∫: {youtube_link}\n"
                        f"‚ùì –í–æ–ø—Ä–æ—Å –∫ —É—Ä–æ–∫—É: {question}\n"
                        f"üìù –û—Ç–≤–µ—Ç—ã: {answers}\n"
                        f"üëç –õ–∞–π–∫–æ–≤: {like_count},üëé –î–∏–∑–ª–∞–π–∫–æ–≤: {dislike_count}"
                    )

                    await state.update_data(next_link=next_link)
                    await state.update_data(previous_link=previous_link)
                    with open(temp_image_path, 'rb') as photo_file:
                        await bot.send_photo(callback_query.message.chat.id, photo=photo_file, caption=lesson_info)

                    os.remove(temp_image_path)

                    keyboard = InlineKeyboardMarkup(row_width=2)
                    if lesson_data.get("previous"):
                        keyboard.add(InlineKeyboardButton("–ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data="previous_lesson"))
                    if lesson_data.get("next"):
                        keyboard.add(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π", callback_data="next_lesson"))

                    await bot.send_message(callback_query.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

                else:
                    await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± —É—Ä–æ–∫–∞—Ö.")
        except Exception as e:
            await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± —É—Ä–æ–∫–∞—Ö.")


@dp.message_handler(lambda message: message.text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', state='*')
async def contacts(message: types.Message, state: FSMContext):
    await message.answer('–ö–æ–Ω—Ç–∞–∫—Ç—ã:\n'
                         'Email -> dastan12151@gmail.com\n'
                         '–ù–∞—à —Å–∞–π—Ç -> https://vanillacode-61871.web.app\n'
                         '–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ü–∏—à–∏ —Å—é–¥–∞ -> @dastanasanov')


@dp.message_handler(lambda message: message.text == '‚ùå –í—ã–π—Ç–∏ –∏–∑ –±–æ—Ç–∞', state='*')
async def quit_bot(message: types.Message, state: FSMContext):
    await message.answer('–ü–æ–∫–∞! –ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ -> /start', reply_markup=types.ReplyKeyboardRemove())
    await bot.close()
    await state.finish()


@dp.message_handler(lambda message: message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', state='*')
async def back_to_main_menu(message: types.Message, state: FSMContext):
    states = [UserState.logged_lesson_design.state,
              UserState.logged_lesson_front.state,
              UserState.logged_lesson_back.state]
    current_state = await state.get_state()
    if current_state in states:
        await UserState.logged.set()
        await subjects(message, state)
    else:
        await cmd_start(message, state)


@dp.message_handler(commands=['send_contact'], state='*')
async def send_contact(message: types.Message):
    await message.answer('–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —á—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –≤–∞—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–∞',
                         reply_markup=markups.share_contact)

    @dp.message_handler(content_types=types.ContentType.CONTACT, state='*')
    async def handle_contact(message: types.Message):
        contact = message.contact
        number = contact.phone_number
        async with aiohttp.ClientSession() as session:
            try:
                async with session.get(CHECK_NUMBER_API+number) as response:
                    if response.status == 200:
                        await message.answer('–ù–∞—à–ª–∏!', reply_markup=markups.start_markup)
                        await UserState.logged.set()
                    elif response.status == 404:
                        await message.answer(f'–Æ–∑–µ—Ä–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n'
                                             f'–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –ø–æ—Å–ª–µ {MAIN_API}',
                                             reply_markup=types.ReplyKeyboardRemove())
            except:
                await message.answer("–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")


@dp.message_handler()
async def answer(message: types.Message):
    await message.reply('–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç, –≤–≤–µ–¥–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é!')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
